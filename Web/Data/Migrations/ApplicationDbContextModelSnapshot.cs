// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

namespace Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.Models.BallotIssue", b =>
                {
                    b.Property<int>("BallotIssueId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BallotIssueTitle");

                    b.Property<string>("Description");

                    b.Property<int>("ElectionId");

                    b.HasKey("BallotIssueId");

                    b.HasIndex("ElectionId");

                    b.ToTable("BallotIssues");
                });

            modelBuilder.Entity("Web.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectionId");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Picture");

                    b.HasKey("CandidateId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Web.Models.CandidateDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CandidateId");

                    b.Property<int>("Format");

                    b.Property<int>("Lang");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateDetails");
                });

            modelBuilder.Entity("Web.Models.CandidateRace", b =>
                {
                    b.Property<int>("CandidateRaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BallotOrder");

                    b.Property<int>("CandidateId");

                    b.Property<int>("RaceId");

                    b.HasKey("CandidateRaceId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("RaceId");

                    b.ToTable("CandidateRaces");
                });

            modelBuilder.Entity("Web.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CandidateId");

                    b.Property<int>("ContactMethod");

                    b.Property<string>("ContactValue");

                    b.HasKey("ContactId");

                    b.HasIndex("CandidateId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Web.Models.Election", b =>
                {
                    b.Property<int>("ElectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ElectionName");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ElectionId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("Web.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Format");

                    b.Property<string>("Placement")
                        .IsRequired();

                    b.Property<string>("ThemeName")
                        .IsRequired();

                    b.Property<string>("Type");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Web.Models.IssueOption", b =>
                {
                    b.Property<int>("IssueOptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BallotIssueId");

                    b.Property<string>("IssueOptionInfo");

                    b.HasKey("IssueOptionId");

                    b.HasIndex("BallotIssueId");

                    b.ToTable("IssueOptions");
                });

            modelBuilder.Entity("Web.Models.OGAudio", b =>
                {
                    b.Property<int>("OGAudioID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Description");

                    b.Property<int>("OpenGraphId");

                    b.Property<string>("SecureURL");

                    b.Property<string>("Type");

                    b.HasKey("OGAudioID");

                    b.HasIndex("OpenGraphId");

                    b.ToTable("OGAudio");
                });

            modelBuilder.Entity("Web.Models.OGImage", b =>
                {
                    b.Property<int>("OGImageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alt");

                    b.Property<string>("Content");

                    b.Property<int>("Height");

                    b.Property<int>("OpenGraphId");

                    b.Property<string>("SecureURL");

                    b.Property<string>("Type");

                    b.Property<int>("Width");

                    b.HasKey("OGImageId");

                    b.HasIndex("OpenGraphId");

                    b.ToTable("OGImage");
                });

            modelBuilder.Entity("Web.Models.OGVideo", b =>
                {
                    b.Property<int>("OGVideoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("Height");

                    b.Property<int>("OpenGraphId");

                    b.Property<string>("SecureURL");

                    b.Property<string>("Type");

                    b.Property<int>("Width");

                    b.HasKey("OGVideoID");

                    b.HasIndex("OpenGraphId");

                    b.ToTable("OGVideo");
                });

            modelBuilder.Entity("Web.Models.OpenGraph", b =>
                {
                    b.Property<int>("OpenGraphId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Determiner");

                    b.Property<string>("Image");

                    b.Property<string>("Locale");

                    b.Property<string>("SiteName");

                    b.Property<string>("Title");

                    b.Property<string>("URL");

                    b.HasKey("OpenGraphId");

                    b.ToTable("OpenGraph");
                });

            modelBuilder.Entity("Web.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Web.Models.PollingPlace", b =>
                {
                    b.Property<int>("PollingPlaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<bool>("AdvanceOnly");

                    b.Property<int>("ElectionId");

                    b.Property<string>("Email");

                    b.Property<double>("Latitude");

                    b.Property<string>("LocalArea");

                    b.Property<double>("Longitude");

                    b.Property<string>("ParkingInfo");

                    b.Property<string>("Phone");

                    b.Property<string>("PollingPlaceName");

                    b.Property<string>("PollingStationName");

                    b.Property<string>("WheelchairInfo");

                    b.HasKey("PollingPlaceId");

                    b.HasIndex("ElectionId");

                    b.ToTable("PollingPlaces");
                });

            modelBuilder.Entity("Web.Models.PollingPlaceDate", b =>
                {
                    b.Property<int>("PollingDateId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("PollingDate");

                    b.Property<int>("PollingPlaceId");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("PollingDateId");

                    b.HasIndex("PollingPlaceId");

                    b.ToTable("PollingPlaceDates");
                });

            modelBuilder.Entity("Web.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BallotOrder");

                    b.Property<string>("Description");

                    b.Property<int>("ElectionId");

                    b.Property<int>("NumberNeeded");

                    b.Property<string>("PositionName")
                        .IsRequired();

                    b.HasKey("RaceId");

                    b.HasIndex("ElectionId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Web.Models.SocialMedia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectionId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<string>("MediaName")
                        .IsRequired();

                    b.Property<string>("Message");

                    b.HasKey("ID");

                    b.HasIndex("ElectionId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("Web.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ManagedElectionID");

                    b.Property<int>("RunningElectionID");

                    b.HasKey("StateId");

                    b.HasIndex("ManagedElectionID");

                    b.HasIndex("RunningElectionID");

                    b.ToTable("StateSingleton");
                });

            modelBuilder.Entity("Web.Models.Step", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectionId");

                    b.Property<string>("StepDescription");

                    b.Property<int>("StepNumber");

                    b.Property<string>("StepTitle");

                    b.HasKey("ID");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("Web.Models.Theme", b =>
                {
                    b.Property<string>("ThemeName")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Selected");

                    b.HasKey("ThemeName");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.BallotIssue", b =>
                {
                    b.HasOne("Web.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Candidate", b =>
                {
                    b.HasOne("Web.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Organization", "Organization")
                        .WithMany("Candidates")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.CandidateDetail", b =>
                {
                    b.HasOne("Web.Models.Candidate", "Candidate")
                        .WithMany("Details")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.CandidateRace", b =>
                {
                    b.HasOne("Web.Models.Candidate", "Candidate")
                        .WithMany("CandidateRaces")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Race", "Race")
                        .WithMany("CandidateRaces")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Contact", b =>
                {
                    b.HasOne("Web.Models.Candidate", "Candidate")
                        .WithMany("Contacts")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.IssueOption", b =>
                {
                    b.HasOne("Web.Models.BallotIssue")
                        .WithMany("BallotIssueOptions")
                        .HasForeignKey("BallotIssueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.OGAudio", b =>
                {
                    b.HasOne("Web.Models.OpenGraph", "OpenGraph")
                        .WithMany("Audios")
                        .HasForeignKey("OpenGraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.OGImage", b =>
                {
                    b.HasOne("Web.Models.OpenGraph", "OpenGraph")
                        .WithMany("Images")
                        .HasForeignKey("OpenGraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.OGVideo", b =>
                {
                    b.HasOne("Web.Models.OpenGraph", "OpenGraph")
                        .WithMany("Videos")
                        .HasForeignKey("OpenGraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.PollingPlace", b =>
                {
                    b.HasOne("Web.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.PollingPlaceDate", b =>
                {
                    b.HasOne("Web.Models.PollingPlace", "PollingPlace")
                        .WithMany("PollingPlaceDates")
                        .HasForeignKey("PollingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Race", b =>
                {
                    b.HasOne("Web.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.SocialMedia", b =>
                {
                    b.HasOne("Web.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.State", b =>
                {
                    b.HasOne("Web.Models.Election", "ManagedElection")
                        .WithMany()
                        .HasForeignKey("ManagedElectionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Election", "RunningElection")
                        .WithMany()
                        .HasForeignKey("RunningElectionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
